{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Cascade model","text":"<p>This is a basic implementation of a tool that lets us define a set of components (enzymes, reagents, flasks) and their cost at specific quantities.</p> <p>We can then define a set of configurations of these components. For example, some cascades might use different immobalisation methods or different relative quantities of enzymes.</p> <p>For each configuration we define we can then</p> <ul> <li>get the cost of each component, </li> <li>sort these costs by most expensive, </li> <li>get an overall cost for the configuration,</li> <li>multiply all quantities by a given factor and re-estimate the cost for the new quantities.</li> </ul> <p>Warning</p> <p>Currently this implements a per quantity price for a component and then assumes the quantity you need to use in your configuration dictates the price you buy this at. In other words, it assumes that you don't share components across cascades. Ideally for each configuration we would want a total quantity used in a single cascade as well as a per quantity price that could be shared across multiple cascades.</p>"},{"location":"inputs_outputs/","title":"Inputs and outputs","text":""},{"location":"inputs_outputs/#basic-inputs","title":"Basic inputs","text":"<p>There are three important concepts -</p> <p><code>Components</code></p> <p>A reagent, enzyme, flask, etc... Any object that can be used in a cascade and can have a quantity and a cost.</p> <p><code>Costs</code></p> <p>How much something costs for a given quantity</p> <p><code>Configurations</code></p> <p>A set of different combinations of Components, that can have different individual quantities and therefore different individual Costs</p> <p>There are two spreadsheets that must be supplied -</p> <p><code>Costs spreadsheet</code></p> <p>Contains a list of all the <code>Components</code> and their <code>Costs</code> at a specific quantity There can be multiple identical <code>Components</code> as long as they have different quantities.</p> <p>Here is an example <code>Costs spreadsheet</code>. Note that there are multiple unit prices for Substrate.</p> Name Quantity Cost 0 DHAD 10 12 1 KARI 10 4 2 ALS 10 5 3 Beaker 20 100 4 Substrate 30 20 5 Substrate 250 14 6 Alginate beads 10 90 <p><code>Configurations spreadsheet</code></p> <p>Contains all of the <code>Configurations</code> that lists the name and quantity of each <code>Component</code>. There can be multiple <code>Configurations</code> within the one spreadsheet (with different <code>Components</code> and/or quantities of <code>Componenets</code>)</p> <p>Here is an example <code>Configurations spreadsheet</code></p> Name Component Quantity 0 Small_cascade DHAD 10 1 Small_cascade KARI 10 2 Small_cascade ALS 10 3 Small_cascade Beaker 20 4 Small_cascade Substrate 30 5 6 7 Alginate_cascade DHAD 10 8 Alginate_cascade KARI 10 9 Alginate_cascade ALS 10 10 Alginate_cascade Beaker 20 11 Alginate_cascade Substrate 30 12 Alginate_cascade Alginate beads 10"},{"location":"inputs_outputs/#basic-outputs","title":"Basic outputs","text":"<p>The basic workflow is to -</p> <ul> <li>Take all the <code>Configurations</code> listed in a <code>Configurations spreadsheet</code></li> <li>Estimate the <code>Cost</code> based on the unit price contained within the <code>Costs</code> spreadsheet for each <code>Component</code></li> <li><code>Costs</code> are either derived directly from the unit price or from the closest unit price to the desired quantity</li> <li>Now we can get the individual costs of each <code>Component</code> within each <code>Configuration</code></li> <li>We can also get the total cost of a <code>Configuration</code></li> <li>We can also scale the quantities in a <code>Configuration</code> by a certain factor and re-estimate the costs - see </li> </ul>"},{"location":"running/","title":"Running the program","text":""},{"location":"running/#run-it-on-command-line","title":"Run it on command line","text":"<p>The entire program can be run directly from the command line</p> <p><code>python cascade_model.py -costs &lt;costs.csv&gt; -configs &lt;configs.csv&gt;</code></p> <p>It will load all of the <code>Configurations</code> it finds in the <code>configs.csv</code> and print the detailed info (the <code>Cost</code> and quantity of each <code>Component</code>).</p> <p>It will then print the total cost of the cascade.</p> <p>Below is an example output -</p> <pre><code>Printing details of Small_cascade\n\nComponent is dhad and it costs $12.0 at a quantity of 10.0\nIt is priced from a direct reference to this quantity\nComponent is kari and it costs $4.0 at a quantity of 10.0\nIt is priced from a direct reference to this quantity\nComponent is als and it costs $5.0 at a quantity of 10.0\nIt is priced from a direct reference to this quantity\nComponent is beaker and it costs $100.0 at a quantity of 20.0\nIt is priced from a direct reference to this quantity\nComponent is substrate and it costs $20.0 at a quantity of 30.0\nIt is priced from a direct reference to this quantity\n\nTotal cost of Small_cascade is 141.0 \n\nPrinting details of Alginate_cascade\n\nComponent is dhad and it costs $12.0 at a quantity of 10.0\nIt is priced from a direct reference to this quantity\nComponent is kari and it costs $4.0 at a quantity of 10.0\nIt is priced from a direct reference to this quantity\nComponent is als and it costs $5.0 at a quantity of 10.0\nIt is priced from a direct reference to this quantity\nComponent is beaker and it costs $100.0 at a quantity of 20.0\nIt is priced from a direct reference to this quantity\nComponent is substrate and it costs $20.0 at a quantity of 30.0\nIt is priced from a direct reference to this quantity\nComponent is alginate beads and it costs $90.0 at a quantity of 10.0\nIt is priced from a direct reference to this quantity\n\nTotal cost of Alginate_cascade is 231.0 \n</code></pre>"},{"location":"running/#run-it-as-a-python-program","title":"Run it as a Python program","text":"<p>You can also run the Python program from within Python - this allows more control over scaling the configurations.</p> <p>A worked example is provided in <code>example.py</code> that shows how to </p> <ul> <li>Access individual configurations directly</li> <li>Access the total cost directly</li> <li>Automatically scale up configurations and print the new costs</li> </ul>"},{"location":"scaling/","title":"Estimating and scaling","text":""},{"location":"scaling/#estimating-costs","title":"Estimating costs","text":"<p>Prices for increased quantities do not scale linearly. To deal with this, the <code>Costs spreadsheet</code> can take any number of quantity / cost pairs. This makes adding more detail to the <code>Costs spreadsheet</code> straightforward and improves the estimations.</p> <p>When a <code>Component</code> from the <code>Configurations spreadsheet</code> is crosschecked against the <code>Costs spreadsheet</code> - a simple check is performed to find the quantity that is the closest to what is wanted. Then this quantity / cost pair is that one that is used to provide a price point for the desired <code>Component</code>.</p>"},{"location":"scaling/#scaling-cascades","title":"Scaling cascades","text":"<p>Once a <code>Configuration</code> is loaded in, all of its quantities can be scaled by a factor, and the new <code>Costs</code> will be worked out again in reference to the <code>Costs spreadsheet</code>.</p> <p>So, if by scaling the quantity, a more appropriate pair of quantity / cost values from the <code>Costs spreadsheet</code> should be used - this will be reflected in the updated, scaled cost.</p> <pre><code>small_cascade.print_detailed_info()\n</code></pre> <pre><code>Component is dhad and it costs $12.0 at a quantity of 10.0\nIt is priced from a direct reference to this quantity\nComponent is kari and it costs $4.0 at a quantity of 10.0\nIt is priced from a direct reference to this quantity\nComponent is als and it costs $5.0 at a quantity of 10.0\nIt is priced from a direct reference to this quantity\nComponent is beaker and it costs $100.0 at a quantity of 20.0\nIt is priced from a direct reference to this quantity\nComponent is substrate and it costs $20.0 at a quantity of 30.0\nIt is priced from a direct reference to this quantity\n\nTotal cost of Small_cascade is $141.0 \n</code></pre> <pre><code>small_cascade.print_detailed_info(scale=10)\n</code></pre> <pre><code>Component is dhad and it costs $120.0 at a quantity of 100.0\nIt is priced from an estimation based on a quantity of 10.0 at a cost of $12.0\nComponent is kari and it costs $40.0 at a quantity of 100.0\nIt is priced from an estimation based on a quantity of 10.0 at a cost of $4.0\nComponent is als and it costs $50.0 at a quantity of 100.0\nIt is priced from an estimation based on a quantity of 10.0 at a cost of $5.0\nComponent is beaker and it costs $1000.0 at a quantity of 200.0\nIt is priced from an estimation based on a quantity of 20.0 at a cost of $100.0\nComponent is substrate and it costs $16.8 at a quantity of 300.0\nIt is priced from an estimation based on a quantity of 250.0 at a cost of $14.0\n\nTotal cost of Small_cascade is $1226.8\n</code></pre>"},{"location":"scaling/#recalculation-of-cost-after-scaling","title":"Recalculation of cost after scaling","text":"<p>Note that we have two price points for Substrate.</p> <p>Costs spreadsheet</p> Name Quantity Cost 4 Substrate 30 20 5 Substrate 250 14 <p>Configuration spreadsheet</p> Name Component Quantity 4 Small_cascade Substrate 30 <p>Before scaling, it is priced at the first quantity / cost pair</p> <pre><code>Component is substrate and it costs $20.0 at a quantity of 30.0\nIt is priced from a direct reference to this quantity\n</code></pre> <p>After scaling, it is priced at the second quantity / cost pair</p> <pre><code>Component is substrate and it costs $16.8 at a quantity of 300.0\nIt is priced from an estimation based on a quantity of 250.0 at a cost of $14.0\n</code></pre>"},{"location":"tests/","title":"Tests","text":""},{"location":"tests/#tests-and-failsafes","title":"Tests and failsafes","text":"<p>There are tests writing in the <code>/test</code> folder which give more examples of how to interact with the code.</p> <p>The tests are arranged into -</p> <ul> <li>Basic tests to load, scale, and re-estimate costs</li> <li>Tests to trigger the command line version</li> <li>Tests that validate that errors are thrown correctly if null values, duplicate values, or values that don't have a match between the <code>Configurations spreadsheet</code> and <code>Costs spreadsheet</code> exist</li> </ul>"}]}